import streamlit as st
import pandas as pd
import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials
from PIL import Image

# ‚úÖ Page config ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="centered")

# =============================
# üîπ LOAD GOOGLE SHEET
# =============================
service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1B_W02AlW7RoV2_qbOHAfVTTYUkKgfyqvjl_IgqQVmzc")
worksheet = spreadsheet.sheet1
data_all = pd.DataFrame(worksheet.get_all_records())
data_all['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = data_all['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str)

# =============================
# üîπ HELPER FUNCTIONS
# =============================
def load_data_by_citizen_id(citizen_id):
    data = data_all[data_all['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] == citizen_id]
    if not data.empty:
        return data.reset_index(drop=True)
    else:
        return None

def calculate_bmi(weight, height_cm):
    try:
        height_m = height_cm / 100
        return round(weight / (height_m ** 2), 1)
    except:
        return None

def interpret_bmi(bmi):
    if not bmi or bmi == 0 or pd.isna(bmi):
        return "-"
    elif bmi > 30:
        return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
    elif 25 <= bmi <= 30:
        return "‡∏≠‡πâ‡∏ß‡∏ô"
    elif 23 <= bmi < 25:
        return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
    elif 18.5 <= bmi < 23:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    else:
        return "‡∏ú‡∏≠‡∏°"

# =============================
# üîπ HOMEPAGE
# =============================
def homepage():
    st.markdown("<h1 style='text-align: center; color: #106c78;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô<br>‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
    st.markdown("<h4 style='text-align: center; color: #106c78;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")

        st.markdown("### üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å")
        id_input = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô", max_chars=13, label_visibility="collapsed", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")

        if st.button("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"):
            if id_input:
                st.session_state["citizen_id"] = id_input
                st.session_state["page"] = "report"
            else:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")

    with col2:
        image = Image.open("magnifying glass.png")
        st.image(image, use_container_width=True)

# =============================
# üîπ BMI DISPLAY PAGE
# =============================
def show_bmi(df):
    st.header("‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å / ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á / BMI ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ")

    years = list(range(61, 69))
    weights, heights, bmis, results = [], [], [], []

    for year in years:
        w_col = f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{year}"
        h_col = f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{year}"

        weight = df.iloc[0].get(w_col, None)
        height = df.iloc[0].get(h_col, None)

        try:
            weight = float(weight)
        except:
            weight = None
        try:
            height = float(height)
        except:
            height = None

        bmi = calculate_bmi(weight, height)
        result = interpret_bmi(bmi)

        weights.append(str(int(weight)) if weight else "-")
        heights.append(str(int(height)) if height else "-")
        bmis.append(f"{bmi:.1f}" if bmi else "-")
        results.append(result)

    years_display = [f"‡∏û.‡∏®. 25{y}" for y in years]

    st.markdown("### üìÜ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à:")
    st.markdown(" / ".join(years_display))
    st.markdown("### ‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.):")
    st.markdown(" / ".join(weights))
    st.markdown("### üìè ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.):")
    st.markdown(" / ".join(heights))
    st.markdown("### üßÆ BMI:")
    st.markdown(" / ".join(bmis))
    st.markdown("### ‚úÖ ‡πÅ‡∏õ‡∏•‡∏ú‡∏•:")
    st.markdown(" / ".join(results))

# =============================
# üîπ ROUTING
# =============================
if "page" not in st.session_state:
    st.session_state["page"] = "home"

query_params = st.query_params
if "cid" in query_params:
    st.session_state["citizen_id"] = query_params["cid"]
    st.session_state["page"] = "report"

if st.session_state["page"] == "home":
    homepage()

elif st.session_state["page"] == "report":
    citizen_id = st.session_state.get("citizen_id", "")
    df = load_data_by_citizen_id(citizen_id)

    if df is not None:
        show_bmi(df)
    else:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
