if "page" not in st.session_state:
    st.session_state["page"] = "home"

if st.session_state["page"] == "home":
    homepage()

elif st.session_state["page"] == "report":
    # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
    citizen_id = st.session_state.get("citizen_id", "")
    df = load_data_by_citizen_id(citizen_id)  # ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if df is not None:
        show_bmi(df)
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô show_blood(df), show_ekg(df)
    else:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

import streamlit as st
import pandas as pd
import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="centered")

# ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Secrets
service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1B_W02AlW7RoV2_qbOHAfVTTYUkKgfyqvjl_IgqQVmzc")
worksheet = spreadsheet.sheet1
df = pd.DataFrame(worksheet.get_all_records())
df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏ú‡∏• BMI
def interpret_bmi(bmi):
    if bmi < 18.5:
        return "‡∏ú‡∏≠‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
    elif bmi < 23:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    elif bmi < 25:
        return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
    elif bmi < 30:
        return "‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1"
    else:
        return "‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 2"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î BMI
def calculate_bmi(weight, height_cm):
    try:
        height_m = height_cm / 100
        return round(weight / (height_m ** 2), 1)
    except:
        return None

def interpret_bmi(bmi):
    if not bmi or bmi == 0 or pd.isna(bmi):
        return "-"
    elif bmi > 30:
        return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
    elif 25 <= bmi <= 30:
        return "‡∏≠‡πâ‡∏ß‡∏ô"
    elif 23 <= bmi < 25:
        return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
    elif 18.5 <= bmi < 23:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    else:
        return "‡∏ú‡∏≠‡∏°"

def show_bmi(df):
    st.header("‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å / ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á / BMI ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ")

    years = list(range(61, 69))  # ‡∏õ‡∏µ 2561 ‡∏ñ‡∏∂‡∏á 2568

    weights = []
    heights = []
    bmis = []
    results = []

    for year in years:
        w_col = f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{year}"
        h_col = f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{year}"

        weight = df.iloc[0].get(w_col, None)
        height = df.iloc[0].get(h_col, None)

        try:
            weight = float(weight)
        except:
            weight = None

        try:
            height = float(height)
        except:
            height = None

        bmi = calculate_bmi(weight, height)
        result = interpret_bmi(bmi)

        weights.append(str(int(weight)) if weight else "-")
        heights.append(str(int(height)) if height else "-")
        bmis.append(f"{bmi:.1f}" if bmi else "-")
        results.append(result)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
    years_display = [f"‡∏û.‡∏®. 25{y}" for y in years]

    st.markdown("### üìÜ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à:")
    st.markdown(" / ".join(years_display))

    st.markdown("### ‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.):")
    st.markdown(" / ".join(weights))

    st.markdown("### üìè ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.):")
    st.markdown(" / ".join(heights))

    st.markdown("### üßÆ BMI:")
    st.markdown(" / ".join(bmis))

    st.markdown("### ‚úÖ ‡πÅ‡∏õ‡∏•‡∏ú‡∏•:")
    st.markdown(" / ".join(results))

# --- ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö ---
import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from PIL import Image

# =========================
# üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
# =========================
def homepage():
    st.set_page_config(layout="wide")
    image = Image.open("DB Homepage.png")

    # ‡πÉ‡∏ä‡πâ columns ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á input ‡πÉ‡∏ï‡πâ‡∏†‡∏≤‡∏û
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        st.image(image, use_column_width=True)

        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")
        st.markdown("### ")

        # ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
        id_input = st.text_input(" ", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å")

        if st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"):
            if id_input:
                st.session_state["citizen_id"] = id_input
                st.session_state["page"] = "report"
            else:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")

